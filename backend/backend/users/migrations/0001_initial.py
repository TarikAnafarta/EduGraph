# Generated by Django 4.2 on 2025-10-25 11:49

import backend.users.utils
from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import uuid


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
    ]

    operations = [
        migrations.CreateModel(
            name="User",
            fields=[
                ("password", models.CharField(max_length=128, verbose_name="password")),
                (
                    "last_login",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="last login"
                    ),
                ),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=255, verbose_name="Name of User")),
                (
                    "email",
                    models.EmailField(
                        db_index=True, max_length=254, unique=True, verbose_name="Email"
                    ),
                ),
                (
                    "is_staff",
                    models.BooleanField(
                        default=False,
                        help_text="Only staff users can access Django Admin.",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=False, help_text="Only active users can login."
                    ),
                ),
                (
                    "date_joined",
                    models.DateTimeField(
                        default=django.utils.timezone.now, verbose_name="Date Joined"
                    ),
                ),
                (
                    "grade",
                    models.IntegerField(
                        blank=True,
                        choices=[
                            (5, "5. Sınıf"),
                            (6, "6. Sınıf"),
                            (7, "7. Sınıf"),
                            (8, "8. Sınıf"),
                            (9, "9. Sınıf"),
                            (10, "10. Sınıf"),
                            (11, "11. Sınıf"),
                            (12, "12. Sınıf"),
                        ],
                        help_text="Student's current grade (5-12)",
                        null=True,
                        verbose_name="Grade",
                    ),
                ),
                (
                    "track",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("lgs", "LGS"),
                            ("sayisal", "Sayısal"),
                            ("sozel", "Sözel"),
                        ],
                        help_text="Academic track (LGS, Sayısal, Sözel)",
                        max_length=10,
                        null=True,
                        verbose_name="Track",
                    ),
                ),
                (
                    "profile_completed",
                    models.BooleanField(
                        default=False,
                        help_text="Whether user has completed their profile information",
                    ),
                ),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.group",
                        verbose_name="groups",
                    ),
                ),
                (
                    "user_permissions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Specific permissions for this user.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.permission",
                        verbose_name="user permissions",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="VerificationCode",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "code",
                    models.CharField(
                        default=backend.users.utils.generate_verification_code,
                        max_length=6,
                        verbose_name="Verification Code",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        auto_now_add=True, verbose_name="Code Creation Date"
                    ),
                ),
                (
                    "user",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="verification_code",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Verification Code Owner",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="RecentAction",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "item_id",
                    models.UUIDField(
                        help_text="The ID of the item (e.g., project, document, etc.) the user interacted with."
                    ),
                ),
                (
                    "item_type",
                    models.CharField(
                        help_text="The type of item (e.g., 'project', 'document', 'task').",
                        max_length=50,
                    ),
                ),
                (
                    "last_accessed_at",
                    models.DateTimeField(
                        auto_now=True,
                        help_text="Timestamp of the last time this item was accessed by the user.",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        help_text="The user associated with this recent action.",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="recent_actions",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "Recent Action",
                "verbose_name_plural": "Recent Actions",
                "ordering": ["-last_accessed_at"],
            },
        ),
        migrations.CreateModel(
            name="PasswordResetToken",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "token",
                    models.UUIDField(
                        default=uuid.uuid4, editable=False, verbose_name="Reset Token"
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        auto_now_add=True, verbose_name="Token Creation Date"
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="password_reset_tokens",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Password Reset Token Owner",
                    ),
                ),
            ],
            options={
                "verbose_name": "Password Reset Token Owner",
                "verbose_name_plural": "Password Reset Token Owners",
                "ordering": ["-created_at"],
            },
        ),
        migrations.AddIndex(
            model_name="recentaction",
            index=models.Index(
                fields=["user", "item_type"], name="users_recen_user_id_3c04fa_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="recentaction",
            index=models.Index(
                fields=["last_accessed_at"], name="users_recen_last_ac_817f92_idx"
            ),
        ),
        migrations.AddConstraint(
            model_name="recentaction",
            constraint=models.UniqueConstraint(
                fields=("user", "item_id", "item_type"), name="unique_user_item_action"
            ),
        ),
        migrations.AddConstraint(
            model_name="passwordresettoken",
            constraint=models.UniqueConstraint(
                fields=("user",), name="unique_user_reset_token"
            ),
        ),
    ]
